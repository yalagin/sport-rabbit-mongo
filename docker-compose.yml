version: '3.4'

x-cache-from:
  - &api-cache-from
    cache_from:
      - ${NGINX_IMAGE:-quay.io/api-platform/nginx}
      - ${PHP_IMAGE:-quay.io/api-platform/php}

services:
  php:
    build:
      context: ./api
      target: api_platform_php
      <<: *api-cache-from
    image: ${PHP_IMAGE:-quay.io/api-platform/php}
    restart: on-failure
    healthcheck:
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    depends_on:
      - db
      - mongo
      - dev-tls
      - rabbit1
    volumes:
      - ./api:/srv/api:rw,cached
      - ./api/docker/php/conf.d/api-platform.dev.ini:/usr/local/etc/php/conf.d/api-platform.ini
      # if you develop on Linux, you may use a bind-mounted host directory instead
      # - ./api/var:/srv/api/var:rw
      - dev-certs:/certs:ro,nocopy
    labels:
      ofelia.enabled: "true"
      ofelia.job-exec.datecron.schedule: "@every 10s"
      ofelia.job-exec.datecron.command: "php bin/console app:sendLiveScores"
      
  consumer:
    image: ${PHP_IMAGE:-quay.io/api-platform/php}
    build:
      context: ./api
      target: api_platform_php
      <<: *api-cache-from
    command: bin/console messenger:consume -vv
    restart: on-failure
    healthcheck:
      test: [ 'CMD', 'ps', 'aux', '|', 'egrep', '"\d+:\d+ php bin/console messenger:consume -vv"' ]
      interval: 3s
      timeout: 3s
      retries: 3
      start_period: 3s
    # Comment out these volumes in production
    volumes:
      - ./api:/srv/api:rw,cached
      - ./api/docker/php/conf.d/api-platform.dev.ini:/usr/local/etc/php/conf.d/api-platform.ini
      # if you develop on Linux, you may use a bind-mounted host directory instead
      # - ./api/var:/srv/api/var:rw

  api:
    build:
      context: ./api
      target: api_platform_nginx
      <<: *api-cache-from
    image: ${NGINX_IMAGE:-quay.io/api-platform/nginx}
    restart: always
    depends_on:
      - php
    volumes:
      - ./api/public:/srv/api/public:ro
#    ports:
#      - "8080:80"
      
  vulcain:
    image: dunglas/vulcain
    environment:
      - CERT_FILE=/certs/localhost.crt
      - KEY_FILE=/certs/localhost.key
      - UPSTREAM=http://api
    depends_on:
      - api
      - dev-tls
    volumes:
      - dev-certs:/certs:ro,nocopy
    ports:
      - target: 443
        published: 8443
        protocol: tcp

  db:
    image: postgres:12-alpine
    environment:
      - POSTGRES_DB=api
      - POSTGRES_PASSWORD=!ChangeMe!
      - POSTGRES_USER=api-platform
    volumes:
      - db-data:/var/lib/postgresql/data:rw
      # you may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./api/docker/db/data:/var/lib/postgresql/data:rw
    ports:
      - target: 5432
        published: 5432
        protocol: tcp

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: "api-platform"
      MONGO_INITDB_ROOT_PASSWORD: "!ChangeMe!"
      MONGO_INITDB_DATABASE: api
    volumes:
      - db-data:/var/lib/postgresql/data:rw
    ports:
      - target: 27017
        published: 27017
        protocol: tcp

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - target: 8081
        published: 8081
        protocol: tcp
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: "api-platform"
      ME_CONFIG_MONGODB_ADMINPASSWORD: "!ChangeMe!"

#  client:
#    build:
#      context: ./client
#      target: api_platform_client_development
#      cache_from:
#        - ${CLIENT_IMAGE:-quay.io/api-platform/client}
#    image: ${CLIENT_IMAGE:-quay.io/api-platform/client}
#    tty: true # https://github.com/facebook/create-react-app/issues/8688
#    environment:
#      - API_PLATFORM_CLIENT_GENERATOR_ENTRYPOINT=http://api
#    depends_on:
#      - dev-tls
#    volumes:
#      - ./client:/usr/src/client:rw,cached
#      - dev-certs:/usr/src/client/certs:rw,nocopy
#    ports:
#      - target: 3000
#        published: 443
#        protocol: tcp

  dev-tls:
    build:
      context: ./docker/dev-tls
    volumes:
      - dev-certs:/certs:rw
    ports:
      - target: 80
        published: 80
        protocol: tcp
        
  rabbit1:
    image: "rabbitmq:3-management"
    hostname: "rabbit1"
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "15672:15672"
      - "5672:5672"
    labels:
      NAME: "rabbitmq1"
    volumes:
      - "./enabled_plugins:/etc/rabbitmq/enabled_plugins"
      #- "./rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro"
      #- "./autocluster-0.4.1.ez:/usr/lib/rabbitmq/lib/rabbitmq_server-3.5.5/plugins/autocluster-0.4.1.ez"
  ofelia:
    image: mcuadros/ofelia:latest
    depends_on:
      - php
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
#    labels:
##      ofelia.job-local.my-test-job.schedule: "@every 5s"
##      ofelia.job-local.my-test-job.command: "bin/console"
##      ofelia.job-local.my-test-job.container: php

volumes:
  db-data: {}
  dev-certs: {}
